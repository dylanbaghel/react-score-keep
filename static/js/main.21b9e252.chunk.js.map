{"version":3,"sources":["components/Header/Header.js","components/Player/Player.js","utils/capitalize.js","components/PlayerList/PlayerList.js","components/AddPlayer/AddPlayer.js","App.js","utils/getSortedPlayer.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Player","str","_this","this","player","props","playerRankClassName","concat","rank","name","toUpperCase","substr","position","score","onClick","incScore","_id","decScore","removePlayer","React","Component","PlayerList","players","length","react_flip_move_es","maintainContainerHeight","map","components_Player_Player","key","AddPlayer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","bind","assertThisInitialized","e","preventDefault","playerName","refs","value","addPlayer","uuid","onSubmit","type","placeholder","ref","autoComplete","App","state","setState","prevState","toConsumableArray","filter","index","objectSpread","numeral","format","getPositionedPlayers","sort","b","getSortedPlayers","components_Header_Header","components_PlayerList_PlayerList","components_AddPlayer_AddPlayer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21b9e252.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"wrapper\">\r\n            <h1 className=\"header__title\">Score Keep</h1>\r\n            <h2 className=\"header_credit\">Created By Dylan Baghel</h2>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { capitalize } from './../../utils/capitalize';\r\n\r\nclass Player extends React.Component {\r\n    render() {\r\n        const { player } = this.props;\r\n        const playerRankClassName = `player--position-${player.rank}`;\r\n        return (\r\n            <div className={`card ${playerRankClassName}`}>\r\n                <div className=\"player\">\r\n                    <div>\r\n                        <h2 className=\"player__name\">{capitalize(player.name)}</h2>\r\n                        <p className=\"player__stats\">{player.position} place {player.score} point(s).</p>\r\n                    </div>\r\n                    <div className=\"player__actions\">\r\n                        <button className=\"button button-round\" onClick={() => {\r\n                            this.props.incScore(player._id);\r\n                        }}>+</button>\r\n                        <button className=\"button button-round\" onClick={() => {\r\n                            this.props.decScore(player._id);\r\n                        }}>-</button>\r\n                        <button className=\"button button-round\" onClick={() => {\r\n                            this.props.removePlayer(player._id);\r\n                        }}>X</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nPlayer.propTypes = {\r\n    player: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Player;","export const capitalize = (str) => str[0].toUpperCase() + str.substr(1);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nimport Player from './../Player/Player';\r\n\r\nconst PlayerList = (props) => {\r\n    const { players } = props;\r\n    return (\r\n        <div className=\"player-list\">\r\n            {\r\n                players.length > 0 ? (\r\n                    <FlipMove maintainContainerHeight={true}>\r\n                        {\r\n                            players.map((player) => {\r\n                                return <Player key={player._id} player={player} incScore={props.incScore} decScore={props.decScore} removePlayer={props.removePlayer} />\r\n                            })\r\n                        }\r\n                    </FlipMove>\r\n                ) : (\r\n                        <div className=\"card\">\r\n                            <p className=\"card__zero\">Add First Player To Get Started</p>\r\n                        </div>\r\n                    )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nPlayerList.propTypes = {\r\n    players: PropTypes.array.isRequired\r\n};\r\n\r\nexport default PlayerList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport uuid from 'uuid';\r\n\r\nclass AddPlayer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        let playerName = this.refs.playerName.value;\r\n        if (playerName) {\r\n            this.refs.playerName.value = '';\r\n            this.props.addPlayer({\r\n                _id: uuid(),\r\n                name: playerName,\r\n                score: 0\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <form onSubmit={this.handleSubmit} className=\"add-player\">\r\n                    <input className=\"add-player__input\" type=\"text\" placeholder=\"Add Player\" ref=\"playerName\" autoComplete=\"off\" name=\"playerName\"/>\r\n                    <button className=\"button\">Add Player</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }   \r\n}\r\n\r\nAddPlayer.propTypes = {\r\n    addPlayer: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddPlayer;","import React, { Component } from 'react';\nimport './App.scss';\n\nimport Header from './components/Header/Header';\nimport PlayerList from './components/PlayerList/PlayerList';\nimport AddPlayer from './components/AddPlayer/AddPlayer';\nimport { getSortedPlayers, getPositionedPlayers } from './utils/getSortedPlayer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.addPlayer = this.addPlayer.bind(this);\n    this.incScore = this.incScore.bind(this);\n    this.decScore = this.decScore.bind(this);\n    this.removePlayer = this.removePlayer.bind(this);\n    this.state = {\n      players: []\n    };\n  }\n\n  addPlayer(player) {\n    this.setState((prevState) => ({\n      players: [\n        ...prevState.players,\n        player\n      ]\n    }));\n  }\n\n  removePlayer(_id) {\n    this.setState((prevState) => ({\n      players: prevState.players.filter((player) => player._id !== _id)\n    }));\n  }\n\n  incScore(_id) {\n    this.setState((prevState) => ({\n      players: prevState.players.map((player) => {\n        if (player._id !== _id) {\n          return player;\n        }\n\n        player.score++;\n        return player;\n      })\n    }));\n  }\n\n  decScore(_id) {\n    this.setState((prevState) => ({\n      players: prevState.players.map((player) => {\n        if (player._id !== _id) {\n          return player;\n        }\n\n        player.score--;\n        return player;\n      })\n    }));\n  }\n\n\n  render() {\n    let players = getPositionedPlayers(getSortedPlayers(this.state.players));\n    return (\n      <div>\n        <Header />\n        <div className=\"wrapper\">\n          <PlayerList players={players} incScore={this.incScore} decScore={this.decScore} removePlayer={this.removePlayer} />\n          <AddPlayer addPlayer={this.addPlayer} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import numeral from 'numeral';\r\n\r\nexport const getSortedPlayers = (players) => {\r\n    return players.sort((a, b) => {\r\n        if (a.score > b.score) {\r\n            return -1;\r\n        } else if (a.score < b.score) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    });\r\n};\r\n\r\nexport const getPositionedPlayers = (players) => {\r\n    let rank = 1;\r\n    return players.map((player, index) => {\r\n        if (index !== 0 && players[index - 1].score > player.score) {\r\n            rank++;\r\n        }\r\n\r\n        return {\r\n            ...player,\r\n            rank,\r\n            position: numeral(rank).format('Oo')\r\n        };\r\n    });\r\n};","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}